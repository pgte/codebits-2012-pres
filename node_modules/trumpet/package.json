{
  "name": "trumpet",
  "version": "0.3.0",
  "description": "parse and transform streaming html using css selectors",
  "main": "index.js",
  "directories": {
    "lib": ".",
    "example": "example",
    "test": "test"
  },
  "dependencies": {
    "sax": "~0.3.5",
    "ent": "~0.0.4"
  },
  "devDependencies": {
    "tap": "~0.2.3"
  },
  "scripts": {
    "test": "tap test/*.js"
  },
  "repository": {
    "type": "git",
    "url": "http://github.com/substack/node-trumpet.git"
  },
  "keywords": [
    "html",
    "streaming",
    "parser",
    "transform",
    "selectors",
    "css"
  ],
  "author": {
    "name": "James Halliday",
    "email": "mail@substack.net",
    "url": "http://substack.net"
  },
  "license": "MIT/X11",
  "engine": {
    "node": ">=0.4"
  },
  "readme": "trumpet\n=======\n\nParse and transform streaming html using css selectors.\n\n[![build status](https://secure.travis-ci.org/substack/node-trumpet.png)](http://travis-ci.org/substack/node-trumpet)\n\n![trumpet](http://substack.net/images/trumpet.png)\n\nexample\n=======\n\nselect\n------\n\n``` js\nvar trumpet = require('trumpet');\nvar tr = trumpet();\n\ntr.select('.b span', function (node) {\n    node.html(function (html) {\n        console.log(node.name + ': ' + html);\n    });\n});\n\nvar fs = require('fs');\nfs.createReadStream(__dirname + '/select.html').pipe(tr);\n```\n\n``` html\n<html>\n  <head>\n    <title>beep</title>\n  </head>\n  <body>\n    <div class=\"a\">¡¡¡</div>\n    <div class=\"b\">\n      <span>tacos</span>\n      <span>y</span>\n      <span>burritos</span>\n    </div>\n    <div class=\"a\">!!!</div>\n  </body>\n</html>\n```\n\noutput:\n\n```\n$ node example/select.js \nspan: tacos\nspan: y\nspan: burritos\n```\n\nupdate\n------\n\n``` js\nvar trumpet = require('trumpet');\nvar tr = trumpet();\n \ntr.update('.b span', function (html, node) {\n    return html.toUpperCase();\n});\n\ntr.update('.c', '---');\ntr.remove('.d');\ntr.remove('.e');\n\nvar fs = require('fs');\ntr.pipe(process.stdout, { end : false });\nfs.createReadStream(__dirname + '/update.html').pipe(tr);\n```\n\n``` html\n<html>\n  <head>\n    <title>beep</title>\n  </head>\n  <body>\n    <div class=\"a\">¡¡¡</div>\n    <div class=\"b\">\n      <span>tacos</span>\n      <span>y</span>\n      <span>burritos</span>\n    </div>\n    <div class=\"a\">!!!</div>\n    \n    <div class=\"c\">\n        <span>beep</span>\n        <span>boop</span>\n    </div>\n    \n    <div class=\"d\">\n        <span>x</span>\n        <span>y</span>\n    </div>\n  </body>\n</html>\n```\n\noutput:\n\n```\n$ node example/update.js\n<html>\n  <head>\n    <title>beep</title>\n  </head>\n  <body>\n    <div class=\"a\">¡¡¡</div>\n    <div class=\"b\">\n      <span>TACOS</span>\n      <span>Y</span>\n      <span>BURRITOS</span>\n    </div>\n    <div class=\"a\">!!!</div>\n    \n    <div class=\"c\">---</div>\n    \n    \n  </body>\n</html>\n```\n\nmethods\n=======\n\nvar trumpet = require('trumpet')\n\nvar tr = trumpet(opts)\n----------------------\n\nCreate a new trumpet stream. This stream is readable and writable.\nPipe an html stream into `tr` and get back a transformed html stream.\n\nParse errors are emitted by `tr` in an `'error'` event.\n\nBy default, trumpet uses this list of\n[self-closing tags](http://stackoverflow.com/questions/97522/what-are-all-the-valid-self-closing-tags-in-xhtml-as-implemented-by-the-major-b):\n\n``` js\n[ 'area', 'base', 'basefont', 'br', 'col', 'hr', 'input', 'img', 'link', 'meta' ]\n```\n\nYou can specify a custom list by setting `opts.special`.\n\ntr.select(selector, fn)\n-----------------------\n\nFire `fn(node)` for every element in the html stream that matches the css\n`selector`.\n\nThe nodes are described in the nodes section of this document.\n\ntr.update(selector, fn)\n-----------------------\n\nCalls `node.update(fn)` on the nodes that match the `selector`\nexcept that `fn` gets the `node` as a second argument.\n\nTo update attributes you'll need to use the long-form of calling `tr.select()`\nthen `node.update(fn, attrs)` inside the callback.\n\ntr.replace(selector, fn)\n------------------------\n\nCalls `node.replace(fn)` on the nodes that match the `selector`\nexcept that `fn` gets the `node` as a second argument.\n\ntr.remove(selector, fn)\n-----------------------\n\nCalls `node.remove()` on nodes that match the `selector`.\n\nIf `fn` is provided, it will be called after an element is removed.\n\nnodes\n=====\n\nnode.name\n---------\n\nThe name of the html element node, such as `'div'` or `'span'`.\n\nnode.attributes\n---------------\n\nAn object with all the html attributes.\n\nFor example,\n\n``` html\n<img src=\"/beep.png\" width=\"32\" height=\"32\">\n```\n\nhas an attribute object of:\n\n``` js\n{ src : 'beep.png', width : '32', height : '32' }\n```\n\nnode.html(cb)\n-------------\n\nGet the inner text and html for the element, which may not have arrived yet.\n\n`cb(text)` fires when the inner contents are ready.\n\nnode.update(cb, attr), node.update(html, attr)\n----------------------------------------------\n\nReplace the node's inner contents with the string `html` or the string return\nvalue from `cb(html)`.\n\nIf `attr` is specified, these will be used in the output stream as the new tag\nattributes instead of `node.attributes`.\n\nnode.replace(cb), node.replace(html)\n------------------------------------\n\nReplace the node's outer content with the string `html` or the return value from\n`cb(html)`. The `html` passed to `cb` will be the outer contents.\n\nnode.remove()\n-------------\n\nRemove a node from the output stream.\n\nselector syntax\n===============\n\nPresently these [css selectors](http://www.w3.org/TR/CSS2/selector.html) work:\n\n* *\n* E\n* E F\n* E > F\n* E + F\n* E.class\n* E#id\n\ninstall\n=======\n\nWith [npm](http://npmjs.org) do:\n\n```\nnpm install trumpet\n```\n\nlicense\n=======\n\nMIT/X11\n",
  "readmeFilename": "README.markdown",
  "_id": "trumpet@0.3.0",
  "dist": {
    "shasum": "67c96ccaced3d240ee5b870c4e3d40467e1fbc10"
  },
  "_from": "trumpet"
}
