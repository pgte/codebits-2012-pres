{
  "name": "woosh",
  "version": "0.2.0",
  "description": "parse and transform streaming html using css selectors in a composable way",
  "main": "index.js",
  "directories": {
    "lib": ".",
    "example": "example",
    "test": "test"
  },
  "dependencies": {
    "sax-pausable": "0.1.x",
    "ent": "~0.0.4",
    "bufferedstream": "1.0.x",
    "middle": "0.0.x",
    "async": "0.1.x"
  },
  "devDependencies": {
    "tap": "~0.2.3"
  },
  "scripts": {
    "test": "tap test/*.js"
  },
  "repository": {
    "type": "git",
    "url": "http://github.com/pgte/woosh.git"
  },
  "keywords": [
    "html",
    "streaming",
    "parser",
    "transform",
    "selectors",
    "css"
  ],
  "author": {
    "name": "Pedro Teixeira",
    "email": "pedro.teixeira@gmail.com",
    "url": "http://metaduck.com"
  },
  "license": "MIT/X11",
  "engine": {
    "node": ">=0.8"
  },
  "readme": "Woosh\n=======\n\nModified version of Substack's Trumpet:\n\nSee https://github.com/substack/node-trumpet\n\nSupports streaming in a composable way, which means you can do:\n\n```js\nvar test = require('tap').test;\nvar trumpet = require('../');\nvar fs = require('fs');\nvar BufferedStream = require('bufferedstream');\n\ntest('compose with streams', function (t) {\n    t.plan(2);\n    var html = fs.readFileSync(__dirname + '/compose_target.html', 'utf8');\n\n    var tr = trumpet();\n    fs.createReadStream(__dirname + '/compose.html').pipe(tr);\n    \n    var spans = [ 'tacos', 'y', 'burritos' ];\n    \n    tr.select('.b span', function (node) {\n        node.update(function (html) {\n            var tr = trumpet();\n            fs.createReadStream(__dirname + '/partial.html').pipe(tr);\n            return tr;\n        });\n    });\n\n    tr.select('.c', function (node) {\n        node.update(function() {\n            var tr = trumpet();\n            fs.createReadStream(__dirname + '/partial.html').pipe(tr);\n            tr.select('.b span', function(node) {\n                node.update(function(html) {\n                    return html.toUpperCase();\n                });\n            });\n            return tr;\n        });\n    });\n    \n    tr.select('.d', function (node) {\n        node.remove();\n    });\n    \n    tr.select('.e', function (node) {\n        node.remove();\n    });\n    \n    tr.select('.f', function (node) {\n        node.replace(function() {\n            var stream = new BufferedStream();\n            stream.end('<b>NOTHING TO SEE HERE</b>');\n            return stream;\n        });\n    });\n    \n    tr.select('.g', function (node) {\n        node.replace(function (html) {\n            t.equal(html, '<div class=\"g\">EVERYTHING IS TERRIBLE</div>');\n            var stream = new BufferedStream();\n            stream.end('<blink>TERRIBLE</blink>');\n            return stream;\n        });\n    });\n    \n    var data = '';\n    tr.on('data', function (buf) { data += buf });\n    \n    tr.on('end', function () {\n        t.equal(data, html);\n    });\n});\n```",
  "readmeFilename": "README.markdown",
  "_id": "woosh@0.2.0",
  "_from": "woosh@*"
}
